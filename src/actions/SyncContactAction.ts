import { Contact } from '../contacts/Contact';
import { normalizePath, TFile } from 'obsidian';
import { Context } from '../obsidian/Context';
import { ContactFileProcessor } from './ContactFileProcessor';

export class SyncContactAction {
	readonly contact: Contact;
	readonly context: Context;

	constructor(context: Context, contact: Contact) {
		this.context = context;
		this.contact = contact;
	}

	getFilepath(): string {
		return normalizePath(this.context.settings.contactsFolder + '/' + this.contact.name + '.md');
	}

	replaceTemplateVariables(body: string): string {
		return body.replace(/{{contactName}}/g, this.contact.name)
			.replace(/{{contactEmail}}/g, this.contact.emails?.[0] ?? '')
			.replace(/{{contactPhone}}/g, this.contact.phones?.[0] ?? '')
			.replace(/{{contactWebsite}}/g, this.contact.website?.[0] ?? '')
			.replace(/{{contactAddress}}/g, this.contact.address?.[0] ?? '')
			.replace(/{{contactBirthday}}/g, this.contact.birthday?.toLocaleDateString() ?? '');
	}

	async execute() {
		await this.createContactsFolder();
		const filename = await this.context.fileHelper.getAbstractFileByPath(this.getFilepath());
		if (!(filename instanceof TFile)) {
			await this.createContact();
			return;
		}

		// Update contact
		if (!this.context.settings.updateContacts) {
			return;
		}

		await this.updateContactIn(filename);
	}

	private async createContactsFolder(): Promise<void> {
		return this.context.fileHelper.createFolderIfNotExists(this.context.settings.contactsFolder);
	}

	private toMarkdown(): string {
		const rawMarkdown = this.context.settings.contactTemplate;
		const markdown = this.replaceTemplateVariables(rawMarkdown);
		return this.getAutogeneratedMarkdownTag() + '\n' + markdown + '\n' + this.getAutogeneratedMarkdownTag();
	}

	private toProperties(): string {
		return this.replaceTemplateVariables(this.context.settings.propertiesTemplate);
	}

	private async createContact(): Promise<void> {
		const newContactMarkdown = `${this.toProperties()}\n${this.toMarkdown()}`;
		await this.context.fileHelper.create(this.getFilepath(), newContactMarkdown);
	}

	private getAutogeneratedMarkdownTag(): string {
		return '<!-- ' + this.context.settings.autogeneratedTag + ' -->';
	}

	private async updateContactIn(file: TFile) {
		const processor = new ContactFileProcessor(
			this.getAutogeneratedMarkdownTag(),
			this.toProperties(),
			this.toMarkdown()
		);
		await this.context.fileHelper.process(file, (oldContent) =>
			processor.execute(oldContent));
	}
}
