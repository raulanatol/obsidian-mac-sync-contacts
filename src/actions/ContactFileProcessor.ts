export class ContactFileProcessor {
	private readonly autogeneratedMarkdownTag: string;
	private readonly markdown: string;
	private readonly properties: string;

	constructor(autogeneratedMarkdownTag: string, properties: string, markdown: string) {
		this.autogeneratedMarkdownTag = autogeneratedMarkdownTag;
		this.properties = properties;
		this.markdown = markdown;
	}

	private replaceAutogeneratedMarkdownTag(lines: string[]): string[] {
		const startReplacementIndex = lines.findIndex((line) => line.startsWith(this.autogeneratedMarkdownTag));
		const endReplacementIndex = lines.findLastIndex((line) => line.startsWith(this.autogeneratedMarkdownTag));

		if (startReplacementIndex === -1) {
			console.warn('[MacSyncContacts] ContactFileProcessor No start autogeneratedTag found');
			return lines;
		}

		if (endReplacementIndex === -1) {
			console.warn('[MacSyncContacts] ContactFileProcessor No end autogeneratedTag found');
			return lines;
		}

		lines.splice(startReplacementIndex, endReplacementIndex - startReplacementIndex + 1, this.markdown);
		return lines;
	}

	private replaceProperties(lines: string[]) {
		if (!lines.length) {
			return lines;
		}

		if (lines[0] !== '---') {
			// No properties found
			return lines;
		}

		lines.shift();
		const endPropertiesIndex = lines.findLastIndex((line) => line.startsWith('---'));
		if (endPropertiesIndex === -1) {
			console.warn('[MacSyncContacts] ContactFileProcessor No end properties found');
			return lines;
		}

		lines.splice(0, endPropertiesIndex + 1, this.properties);
		return lines;
	}

	execute(currentFileContent: string): string {
		let lines = currentFileContent.split('\n');
		lines = this.replaceAutogeneratedMarkdownTag(lines);
		lines = this.replaceProperties(lines);
		return lines.join('\n');
	}
}
