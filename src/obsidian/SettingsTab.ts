import { App, Notice, PluginSettingTab, Setting } from 'obsidian';
import MacSyncContactsPlugin from '../../main';
import { FolderSuggest } from './suggest/FolderSuggest';

const DEFAULT_CONTACT_TEMPLATE = `# {{contactName}}

`;

const DEFAULT_PROPERTIES_TEMPLATE = `---
type: 'people'
---
`;

export const DEFAULT_SETTINGS: MacSyncContactsPluginSettings = {
	contactsFolder: 'People',
	updateContacts: false,
	autogeneratedTag: 'MAC_SYNC_CONTACTS_AUTOGENERATED',
	contactTemplate: DEFAULT_CONTACT_TEMPLATE,
	propertiesTemplate: DEFAULT_PROPERTIES_TEMPLATE
}

export interface MacSyncContactsPluginSettings {
	contactTemplate: string;
	contactsFolder: string;
	updateContacts: boolean;
	autogeneratedTag: string;
	propertiesTemplate: string;
}

export class SettingsTab extends PluginSettingTab {
	plugin: MacSyncContactsPlugin;

	constructor(app: App, plugin: MacSyncContactsPlugin) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		this.containerEl.empty();

		this.addContactsFolder();
		this.addUpdateContacts();
		this.addContactTemplate();
		this.addPropertiesTemplate();
	}

	private addContactsFolder() {
		new Setting(this.containerEl)
			.setName('Contacts folder')
			.setDesc('Select the folder where your contacts are stored')
			.addSearch(search => {
				new FolderSuggest(search.inputEl);
				search.setPlaceholder('Contacts folder')
					.setValue(this.plugin.settings.contactsFolder)
					.onChange(async (value) => {
						this.plugin.settings.contactsFolder = value;
						await this.plugin.saveSettings();
					})
			});
	}


	private addUpdateContacts() {
		new Setting(this.containerEl)
			.setName('Update contacts?')
			.setDesc('Update contacts when they are changed in Contacts.app. Can lose the obsidian data')
			.addToggle(toggle => {
				toggle.setValue(this.plugin.settings.updateContacts)
					.onChange(async (value) => {
						this.plugin.settings.updateContacts = value;
						await this.plugin.saveSettings();
					})
			});
	}

	private addContactTemplate() {
		new Setting(this.containerEl)
			.setName('Contact template')
			.setDesc(createFragment(fragment => {
				fragment.append('Template for contact file\n. Using variables like {{contactName}} and {{contactEmail}}.\n',
					fragment.createEl('a', {
						text: 'Reference',
						href: 'https://github.com/raulanatol/obsidian-mac-sync-contacts?tab=readme-ov-file#template-variables'
					}));
			}))
			.addTextArea(text => {
				text.setPlaceholder('Contact template')
					.setValue(this.plugin.settings.contactTemplate)
					.onChange(async (value) => {
						this.plugin.settings.contactTemplate = value;
						await this.plugin.saveSettings();
					});
				text.inputEl.setAttr('rows', 25);
				text.inputEl.setAttr('cols', 50);
			})
			.addExtraButton(button => {
				button.setIcon('reset')
					.setTooltip('Reset to default')
					.onClick(async () => {
						this.plugin.settings.contactTemplate = DEFAULT_SETTINGS.contactTemplate;
						await this.plugin.saveSettings();
						this.display();
						new Notice('Template reset to default')
					});
			})
	}


	private addPropertiesTemplate() {
		new Setting(this.containerEl)
			.setName('Properties template')
			.setDesc(createFragment(fragment => {
				fragment.append('Properties in contact file\n. Using variables like {{contactName}} and {{contactEmail}}.\n',
					fragment.createEl('a', {
						text: 'Reference',
						href: 'https://github.com/raulanatol/obsidian-mac-sync-contacts?tab=readme-ov-file#template-variables'
					}));
			}))
			.addTextArea(text => {
				text.setPlaceholder('Properties template')
					.setValue(this.plugin.settings.propertiesTemplate)
					.onChange(async (value) => {
						this.plugin.settings.propertiesTemplate = value;
						await this.plugin.saveSettings();
					});
				text.inputEl.setAttr('rows', 25);
				text.inputEl.setAttr('cols', 50);
			})
			.addExtraButton(button => {
				button.setIcon('reset')
					.setTooltip('Reset to default')
					.onClick(async () => {
						this.plugin.settings.propertiesTemplate = DEFAULT_SETTINGS.propertiesTemplate;
						await this.plugin.saveSettings();
						this.display();
						new Notice('Properties reset to default')
					});
			})
	}
}
